<style>
    .profile-popup {
    position: fixed;
    top: 39%;
    bottom: 39%;
    left: 35%;
    right: 35%;
    background-color: white;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    overflow: hidden;
    }

    .profile-page {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column
    }

    .fio {
    display: flex;
    width: 100%;
    height: 70%;
    align-items: center;
    justify-content: flex-start;
    overflow: hidden;
    }

    .photo {
    width: 20%;
    margin: 0 0 0 2.5%;
    object-fit: cover;
    object-position: center;
    }

    .name {
    display: flex;
    width: 80%;
    justify-content: flex-start;
    font-size: 1.2vw;
    font-weight: 600;
    }

    .name-text {
    margin: 0 0 0 2%;
    }

    .input-container {
    display: flex;
    position: relative;
    width: 100%;
    height: 30%;
    align-items: flex-end;
    justify-content: space-between
    }

    .input-profile {
    margin: 0 2.5% 2.5% 2.5%;
    padding: 1% 1%;
    border: 1px solid black;
    border-radius: 0.4vw;
    font-size: 0.9vw;
    }

    .wrong-phone {
    position: absolute;
    bottom: 70%;
    left: 5%;
    color: red;
    font-size: 0.8vw;
    font-weight: 600
    }

    .wrong-mail {
    position: absolute;
    bottom: 70%;
    right: 5%;
    color: red;
    font-size: 0.8vw;
    font-weight: 600
    }

    .exit {
    position: absolute;
    top: 25px;
    right: 25px;
    width: 50px;
    height: 50px;
    cursor: pointer;
    }
</style>


<div class="profile-popup" style="display:@(IsVisible ? "flex" : "none")">
    <div class="profile-page">
        <div class="fio">
            <img class="photo" src="@((UserContext.gender == "M") ? "images/male-icon.png" : "images/female-icon.png")" />
            <div class="name">
                <p class="name-text">@UserContext.lastName</p>
                <p class="name-text">@UserContext.firstName</p>
                <p class="name-text">@UserContext.middleName</p>
            </div>
        </div>
        <div class="input-container">
            <input class="input-profile" type="text" @oninput="phoneChanged" @bind="phone" />
            <input class="input-profile" type="text" @oninput="mailChanged" @bind="mail" />
            @if(!isPhoneCorrect)
            {
                <p class="wrong-phone">Неверный формат телефона!</p>
            }
            @if(!isEmailCorrect)
            {
                <p class="wrong-mail">Неверный формат эл.почты!</p>
            }
        </div>
    </div>
    <img class="exit" src="images/exit.png" @onclick="Close"/>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    string phone = UserContext.phoneNumber;
    string mail = UserContext.email;
    bool isPhoneCorrect = true;
    bool isEmailCorrect = true;

    private async Task phoneChanged(ChangeEventArgs e)
    {
        phone = e.Value.ToString();
        await validatePhone();
    }

    private async Task mailChanged(ChangeEventArgs e)
    {
        mail = e.Value.ToString();
        await validateMail();
    }

    private async Task validatePhone() {
        if (string.IsNullOrEmpty(phone))
        {
            isPhoneCorrect = false;
            return;
        }
        var phonePattern = @"^(?:\+7|8)\d{10}$";
        isPhoneCorrect = System.Text.RegularExpressions.Regex.IsMatch(phone, phonePattern);
        if (isPhoneCorrect)
        {
            UserContext.phoneNumber = phone;
            await SQLiteService.updateEmployee();
        }
    }

    private async Task validateMail() {
        var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        isEmailCorrect = System.Text.RegularExpressions.Regex.IsMatch(mail, emailPattern);
        if (isEmailCorrect)
        {
            UserContext.email = mail;
            await SQLiteService.updateEmployee();
        }
    }

    private void Close()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
        phone = UserContext.phoneNumber;
        mail = UserContext.email;
        isPhoneCorrect = true;
        isEmailCorrect = true;
    }
}